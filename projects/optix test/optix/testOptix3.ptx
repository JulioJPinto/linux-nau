//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25769353
// Cuda compilation tools, release 10.1, V10.1.105
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	__closesthit__phong
.const .align 8 .b8 optixLaunchParams[88];

.visible .entry __closesthit__phong(

)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<85>;
	.reg .b32 	%r<8>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<28>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd8, %r1;
	shl.b64 	%rd9, %rd8, 32;
	cvt.u64.u32	%rd10, %r2;
	or.b64  	%rd1, %rd9, %rd10;
	// inline asm
	call (%rd7), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r3), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd11, [%rd7];
	mul.wide.s32 	%rd12, %r3, 12;
	add.s64 	%rd13, %rd11, %rd12;
	ld.u32 	%r4, [%rd13];
	ld.u32 	%r5, [%rd13+4];
	ld.u32 	%r6, [%rd13+8];
	// inline asm
	call (%f5, %f6), _optix_get_triangle_barycentrics, ();
	// inline asm
	mov.f32 	%f7, 0f3F800000;
	sub.ftz.f32 	%f8, %f7, %f5;
	sub.ftz.f32 	%f3, %f8, %f6;
	cvt.u64.u32	%rd3, %r4;
	ld.u64 	%rd14, [%rd7+16];
	mul.wide.u32 	%rd15, %r4, 16;
	add.s64 	%rd16, %rd14, %rd15;
	ld.v4.f32 	{%f9, %f10, %f11, %f12}, [%rd16];
	cvt.u64.u32	%rd4, %r5;
	mul.wide.u32 	%rd17, %r5, 16;
	add.s64 	%rd18, %rd14, %rd17;
	ld.v4.f32 	{%f16, %f17, %f18, %f19}, [%rd18];
	mul.ftz.f32 	%f23, %f5, %f16;
	mul.ftz.f32 	%f24, %f5, %f17;
	mul.ftz.f32 	%f25, %f5, %f18;
	fma.rn.ftz.f32 	%f26, %f9, %f3, %f23;
	fma.rn.ftz.f32 	%f27, %f10, %f3, %f24;
	fma.rn.ftz.f32 	%f28, %f11, %f3, %f25;
	cvt.u64.u32	%rd5, %r6;
	mul.wide.u32 	%rd19, %r6, 16;
	add.s64 	%rd20, %rd14, %rd19;
	ld.v4.f32 	{%f29, %f30, %f31, %f32}, [%rd20];
	fma.rn.ftz.f32 	%f36, %f6, %f29, %f26;
	fma.rn.ftz.f32 	%f37, %f6, %f30, %f27;
	fma.rn.ftz.f32 	%f38, %f6, %f31, %f28;
	mul.ftz.f32 	%f39, %f37, %f37;
	fma.rn.ftz.f32 	%f40, %f36, %f36, %f39;
	fma.rn.ftz.f32 	%f41, %f38, %f38, %f40;
	rsqrt.approx.ftz.f32 	%f42, %f41;
	mul.ftz.f32 	%f43, %f36, %f42;
	mul.ftz.f32 	%f44, %f37, %f42;
	mul.ftz.f32 	%f45, %f38, %f42;
	mul.ftz.f32 	%f46, %f44, 0f3EC7AE14;
	fma.rn.ftz.f32 	%f47, %f43, 0fBF18D4FE, %f46;
	fma.rn.ftz.f32 	%f48, %f45, 0fBF333333, %f47;
	mov.f32 	%f49, 0f00000000;
	max.ftz.f32 	%f50, %f48, %f49;
	add.ftz.f32 	%f51, %f50, 0f3E99999A;
	cvt.ftz.f64.f32	%fd1, %f51;
	mov.f64 	%fd2, 0d3FF0000000000000;
	min.f64 	%fd3, %fd2, %fd1;
	cvt.rn.ftz.f32.f64	%f4, %fd3;
	ld.u32 	%r7, [%rd7+48];
	setp.eq.s32	%p1, %r7, 0;
	@%p1 bra 	BB0_3;

	ld.u64 	%rd6, [%rd7+24];
	setp.eq.s64	%p2, %rd6, 0;
	@%p2 bra 	BB0_3;

	shl.b64 	%rd21, %rd3, 4;
	add.s64 	%rd22, %rd6, %rd21;
	ld.v2.f32 	{%f52, %f53}, [%rd22];
	shl.b64 	%rd23, %rd4, 4;
	add.s64 	%rd24, %rd6, %rd23;
	ld.v2.f32 	{%f56, %f57}, [%rd24];
	mul.ftz.f32 	%f60, %f5, %f56;
	mul.ftz.f32 	%f61, %f5, %f57;
	fma.rn.ftz.f32 	%f62, %f3, %f52, %f60;
	fma.rn.ftz.f32 	%f63, %f3, %f53, %f61;
	shl.b64 	%rd25, %rd5, 4;
	add.s64 	%rd26, %rd6, %rd25;
	ld.v2.f32 	{%f64, %f65}, [%rd26];
	fma.rn.ftz.f32 	%f68, %f6, %f64, %f62;
	fma.rn.ftz.f32 	%f69, %f6, %f65, %f63;
	ld.u64 	%rd27, [%rd7+56];
	tex.2d.v4.f32.f32	{%f70, %f71, %f72, %f73}, [%rd27, {%f68, %f69}];
	mul.ftz.f32 	%f74, %f4, %f70;
	mul.ftz.f32 	%f75, %f4, %f71;
	mul.ftz.f32 	%f76, %f4, %f72;
	st.f32 	[%rd1], %f74;
	st.f32 	[%rd1+4], %f75;
	st.f32 	[%rd1+8], %f76;
	bra.uni 	BB0_4;

BB0_3:
	ld.v2.f32 	{%f77, %f78}, [%rd7+64];
	mul.ftz.f32 	%f81, %f4, %f77;
	mul.ftz.f32 	%f82, %f4, %f78;
	ld.f32 	%f83, [%rd7+72];
	mul.ftz.f32 	%f84, %f4, %f83;
	st.f32 	[%rd1], %f81;
	st.f32 	[%rd1+4], %f82;
	st.f32 	[%rd1+8], %f84;

BB0_4:
	ret;
}

	// .globl	__anyhit__phong
.visible .entry __anyhit__phong(

)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<43>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<12>;


	// inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd2, [%rd1];
	mul.wide.s32 	%rd3, %r1, 12;
	add.s64 	%rd4, %rd2, %rd3;
	ld.u32 	%r2, [%rd4];
	ld.u64 	%rd5, [%rd1+8];
	mul.wide.u32 	%rd6, %r2, 16;
	add.s64 	%rd7, %rd5, %rd6;
	ld.v4.f32 	{%f4, %f5, %f6, %f7}, [%rd7];
	ld.u32 	%r3, [%rd4+4];
	mul.wide.u32 	%rd8, %r3, 16;
	add.s64 	%rd9, %rd5, %rd8;
	ld.v4.f32 	{%f11, %f12, %f13, %f14}, [%rd9];
	ld.u32 	%r4, [%rd4+8];
	mul.wide.u32 	%rd10, %r4, 16;
	add.s64 	%rd11, %rd5, %rd10;
	ld.v4.f32 	{%f18, %f19, %f20, %f21}, [%rd11];
	// inline asm
	call (%f1), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f2), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f3), _optix_get_world_ray_direction_z, ();
	// inline asm
	sub.ftz.f32 	%f25, %f11, %f4;
	sub.ftz.f32 	%f26, %f12, %f5;
	sub.ftz.f32 	%f27, %f13, %f6;
	sub.ftz.f32 	%f28, %f18, %f4;
	sub.ftz.f32 	%f29, %f19, %f5;
	sub.ftz.f32 	%f30, %f20, %f6;
	mul.ftz.f32 	%f31, %f26, %f30;
	mul.ftz.f32 	%f32, %f27, %f29;
	sub.ftz.f32 	%f33, %f31, %f32;
	mul.ftz.f32 	%f34, %f27, %f28;
	mul.ftz.f32 	%f35, %f25, %f30;
	sub.ftz.f32 	%f36, %f34, %f35;
	mul.ftz.f32 	%f37, %f25, %f29;
	mul.ftz.f32 	%f38, %f26, %f28;
	sub.ftz.f32 	%f39, %f37, %f38;
	mul.ftz.f32 	%f40, %f36, %f2;
	fma.rn.ftz.f32 	%f41, %f33, %f1, %f40;
	fma.rn.ftz.f32 	%f42, %f39, %f3, %f41;
	setp.leu.ftz.f32	%p1, %f42, 0f00000000;
	@%p1 bra 	BB1_2;

	// inline asm
	call _optix_ignore_intersection, ();
	// inline asm

BB1_2:
	ret;
}

	// .globl	__miss__phong
.visible .entry __miss__phong(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__raygen__renderFrame
.visible .entry __raygen__renderFrame(

)
{
	.local .align 4 .b8 	__local_depot3[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<57>;
	.reg .b32 	%r<26>;
	.reg .b64 	%rd<10>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd2, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	// inline asm
	call (%r1), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_launch_index_y, ();
	// inline asm
	mov.u64 	%rd4, 1065353216;
	st.local.u32 	[%rd3+4], %rd4;
	st.local.u32 	[%rd3], %rd4;
	mov.u32 	%r16, 1065353216;
	st.local.u32 	[%rd3+8], %r16;
	shr.u64 	%rd5, %rd2, 32;
	cvt.u32.u64	%r14, %rd5;
	cvt.u32.u64	%r15, %rd2;
	cvt.rn.f32.s32	%f10, %r1;
	add.ftz.f32 	%f11, %f10, 0f3F000000;
	cvt.rn.f32.s32	%f12, %r2;
	add.ftz.f32 	%f13, %f12, 0f3F000000;
	// inline asm
	call (%r4), _optix_get_launch_dimension_x, ();
	// inline asm
	// inline asm
	call (%r5), _optix_get_launch_dimension_y, ();
	// inline asm
	cvt.rn.f32.u32	%f14, %r4;
	cvt.rn.f32.u32	%f15, %r5;
	div.approx.ftz.f32 	%f16, %f11, %f14;
	div.approx.ftz.f32 	%f17, %f13, %f15;
	fma.rn.ftz.f32 	%f18, %f16, 0f40000000, 0fBF800000;
	fma.rn.ftz.f32 	%f19, %f17, 0f40000000, 0fBF800000;
	ld.const.v2.f32 	{%f20, %f21}, [optixLaunchParams+48];
	mov.u32 	%r13, 0;
	mov.u32 	%r12, 1;
	ld.const.v2.f32 	{%f24, %f25}, [optixLaunchParams+56];
	ld.const.v2.f32 	{%f28, %f29}, [optixLaunchParams+32];
	fma.rn.ftz.f32 	%f31, %f20, %f18, %f29;
	ld.const.v2.f32 	{%f32, %f33}, [optixLaunchParams+40];
	fma.rn.ftz.f32 	%f36, %f18, %f21, %f32;
	fma.rn.ftz.f32 	%f37, %f18, %f24, %f33;
	ld.const.v2.f32 	{%f38, %f39}, [optixLaunchParams+64];
	fma.rn.ftz.f32 	%f42, %f19, %f25, %f31;
	fma.rn.ftz.f32 	%f43, %f19, %f38, %f36;
	fma.rn.ftz.f32 	%f44, %f19, %f39, %f37;
	mul.ftz.f32 	%f45, %f43, %f43;
	fma.rn.ftz.f32 	%f46, %f42, %f42, %f45;
	fma.rn.ftz.f32 	%f47, %f44, %f44, %f46;
	rsqrt.approx.ftz.f32 	%f48, %f47;
	mul.ftz.f32 	%f4, %f42, %f48;
	mul.ftz.f32 	%f5, %f43, %f48;
	mul.ftz.f32 	%f6, %f44, %f48;
	ld.const.u64 	%rd1, [optixLaunchParams+72];
	ld.const.v2.f32 	{%f49, %f50}, [optixLaunchParams+24];
	mov.u32 	%r9, 255;
	mov.f32 	%f8, 0f60AD78EC;
	mov.f32 	%f9, 0f00000000;
	// inline asm
	call (%r7, %r8), _optix_trace_2, (%rd1, %f49, %f50, %f28, %f4, %f5, %f6, %f9, %f8, %f9, %r9, %r13, %r13, %r12, %r13, %r14, %r15);
	// inline asm
	ld.local.f32 	%f51, [%rd3];
	mul.ftz.f32 	%f52, %f51, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r17, %f52;
	ld.local.f32 	%f53, [%rd3+4];
	mul.ftz.f32 	%f54, %f53, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r18, %f54;
	ld.local.f32 	%f55, [%rd3+8];
	mul.ftz.f32 	%f56, %f55, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r19, %f56;
	shl.b32 	%r20, %r18, 8;
	shl.b32 	%r21, %r19, 16;
	or.b32  	%r22, %r17, %r20;
	or.b32  	%r23, %r22, %r21;
	or.b32  	%r24, %r23, -16777216;
	mad.lo.s32 	%r25, %r4, %r2, %r1;
	ld.const.u64 	%rd6, [optixLaunchParams+8];
	cvta.to.global.u64 	%rd7, %rd6;
	mul.wide.u32 	%rd8, %r25, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.u32 	[%rd9], %r24;
	ret;
}


