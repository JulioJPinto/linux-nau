//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25769353
// Cuda compilation tools, release 10.1, V10.1.105
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	__closesthit__phong
.const .align 8 .b8 optixLaunchParams[88];

.visible .entry __closesthit__phong(

)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .f32 	%f<127>;
	.reg .b32 	%r<18>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<36>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd10, %SP, 0;
	add.u64 	%rd1, %SPL, 0;
	// inline asm
	call (%rd8), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd11, [%rd8];
	mul.wide.s32 	%rd12, %r1, 12;
	add.s64 	%rd13, %rd11, %rd12;
	ld.u32 	%r13, [%rd13];
	ld.u32 	%r14, [%rd13+4];
	ld.u32 	%r15, [%rd13+8];
	// inline asm
	call (%f4, %f5), _optix_get_triangle_barycentrics, ();
	// inline asm
	mov.f32 	%f15, 0f3F800000;
	sub.ftz.f32 	%f16, %f15, %f4;
	sub.ftz.f32 	%f17, %f16, %f5;
	cvt.u64.u32	%rd3, %r13;
	ld.u64 	%rd14, [%rd8+16];
	mul.wide.u32 	%rd15, %r13, 16;
	add.s64 	%rd16, %rd14, %rd15;
	ld.v4.f32 	{%f18, %f19, %f20, %f21}, [%rd16];
	mov.u32 	%r8, 1;
	mov.u32 	%r7, 2;
	cvt.u64.u32	%rd4, %r14;
	mul.wide.u32 	%rd17, %r14, 16;
	add.s64 	%rd18, %rd14, %rd17;
	ld.v4.f32 	{%f25, %f26, %f27, %f28}, [%rd18];
	mul.ftz.f32 	%f32, %f4, %f25;
	mul.ftz.f32 	%f33, %f4, %f26;
	mul.ftz.f32 	%f34, %f4, %f27;
	fma.rn.ftz.f32 	%f35, %f18, %f17, %f32;
	fma.rn.ftz.f32 	%f36, %f19, %f17, %f33;
	fma.rn.ftz.f32 	%f37, %f20, %f17, %f34;
	cvt.u64.u32	%rd5, %r15;
	mul.wide.u32 	%rd19, %r15, 16;
	add.s64 	%rd20, %rd14, %rd19;
	ld.v4.f32 	{%f38, %f39, %f40, %f41}, [%rd20];
	fma.rn.ftz.f32 	%f45, %f5, %f38, %f35;
	fma.rn.ftz.f32 	%f46, %f5, %f39, %f36;
	fma.rn.ftz.f32 	%f47, %f5, %f40, %f37;
	ld.u64 	%rd21, [%rd8+8];
	add.s64 	%rd22, %rd21, %rd15;
	ld.v4.f32 	{%f48, %f49, %f50, %f51}, [%rd22];
	add.s64 	%rd23, %rd21, %rd17;
	ld.v4.f32 	{%f55, %f56, %f57, %f58}, [%rd23];
	add.s64 	%rd24, %rd21, %rd19;
	ld.v4.f32 	{%f62, %f63, %f64, %f65}, [%rd24];
	mul.ftz.f32 	%f69, %f46, %f46;
	fma.rn.ftz.f32 	%f70, %f45, %f45, %f69;
	fma.rn.ftz.f32 	%f71, %f47, %f47, %f70;
	rsqrt.approx.ftz.f32 	%f72, %f71;
	mul.ftz.f32 	%f73, %f45, %f72;
	mul.ftz.f32 	%f74, %f46, %f72;
	mul.ftz.f32 	%f75, %f47, %f72;
	mul.ftz.f32 	%f76, %f74, 0f3F6892C7;
	fma.rn.ftz.f32 	%f77, %f73, 0fBE8AD8A6, %f76;
	fma.rn.ftz.f32 	%f78, %f75, 0fBEA2CD25, %f77;
	mov.f32 	%f14, 0f00000000;
	max.ftz.f32 	%f3, %f78, %f14;
	mov.u32 	%r16, 1065353216;
	st.local.u32 	[%rd1], %r16;
	shr.u64 	%rd25, %rd10, 32;
	cvt.u32.u64	%r9, %rd25;
	cvt.u32.u64	%r10, %rd10;
	mul.ftz.f32 	%f79, %f4, %f55;
	mul.ftz.f32 	%f80, %f4, %f56;
	mul.ftz.f32 	%f81, %f4, %f57;
	fma.rn.ftz.f32 	%f82, %f17, %f48, %f79;
	fma.rn.ftz.f32 	%f83, %f17, %f49, %f80;
	fma.rn.ftz.f32 	%f84, %f17, %f50, %f81;
	fma.rn.ftz.f32 	%f6, %f5, %f62, %f82;
	fma.rn.ftz.f32 	%f7, %f5, %f63, %f83;
	fma.rn.ftz.f32 	%f8, %f5, %f64, %f84;
	ld.const.u64 	%rd9, [optixLaunchParams+72];
	mov.u32 	%r4, 255;
	mov.u32 	%r5, 4;
	mov.f32 	%f9, 0fBE8AD8A6;
	mov.f32 	%f10, 0f3F6892C7;
	mov.f32 	%f11, 0fBEA2CD25;
	mov.f32 	%f12, 0f3DCCCCCD;
	mov.f32 	%f13, 0f60AD78EC;
	// inline asm
	call (%r2, %r3), _optix_trace_2, (%rd9, %f6, %f7, %f8, %f9, %f10, %f11, %f12, %f13, %f14, %r4, %r5, %r8, %r7, %r8, %r9, %r10);
	// inline asm
	// inline asm
	call (%r11), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r12), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd26, %r11;
	shl.b64 	%rd27, %rd26, 32;
	cvt.u64.u32	%rd28, %r12;
	or.b64  	%rd6, %rd27, %rd28;
	ld.u32 	%r17, [%rd8+48];
	setp.eq.s32	%p1, %r17, 0;
	@%p1 bra 	BB0_3;

	ld.u64 	%rd7, [%rd8+24];
	setp.eq.s64	%p2, %rd7, 0;
	@%p2 bra 	BB0_3;

	shl.b64 	%rd29, %rd3, 4;
	add.s64 	%rd30, %rd7, %rd29;
	ld.v2.f32 	{%f85, %f86}, [%rd30];
	shl.b64 	%rd31, %rd4, 4;
	add.s64 	%rd32, %rd7, %rd31;
	ld.v2.f32 	{%f92, %f93}, [%rd32];
	mul.ftz.f32 	%f96, %f4, %f92;
	mul.ftz.f32 	%f97, %f4, %f93;
	fma.rn.ftz.f32 	%f98, %f17, %f85, %f96;
	fma.rn.ftz.f32 	%f99, %f17, %f86, %f97;
	shl.b64 	%rd33, %rd5, 4;
	add.s64 	%rd34, %rd7, %rd33;
	ld.v2.f32 	{%f100, %f101}, [%rd34];
	fma.rn.ftz.f32 	%f104, %f5, %f100, %f98;
	fma.rn.ftz.f32 	%f105, %f5, %f101, %f99;
	ld.u64 	%rd35, [%rd8+56];
	tex.2d.v4.f32.f32	{%f106, %f107, %f108, %f109}, [%rd35, {%f104, %f105}];
	ld.local.f32 	%f110, [%rd1];
	mul.ftz.f32 	%f111, %f3, %f110;
	cvt.ftz.f64.f32	%fd1, %f111;
	add.f64 	%fd2, %fd1, 0d3FD3333333333333;
	cvt.rn.ftz.f32.f64	%f112, %fd2;
	mul.ftz.f32 	%f113, %f106, %f112;
	mul.ftz.f32 	%f114, %f107, %f112;
	mul.ftz.f32 	%f115, %f108, %f112;
	st.f32 	[%rd6], %f113;
	st.f32 	[%rd6+4], %f114;
	st.f32 	[%rd6+8], %f115;
	bra.uni 	BB0_4;

BB0_3:
	ld.local.f32 	%f116, [%rd1];
	mul.ftz.f32 	%f117, %f3, %f116;
	cvt.ftz.f64.f32	%fd3, %f117;
	add.f64 	%fd4, %fd3, 0d3FD3333333333333;
	cvt.rn.ftz.f32.f64	%f118, %fd4;
	ld.v2.f32 	{%f119, %f120}, [%rd8+64];
	mul.ftz.f32 	%f123, %f119, %f118;
	mul.ftz.f32 	%f124, %f120, %f118;
	ld.f32 	%f125, [%rd8+72];
	mul.ftz.f32 	%f126, %f125, %f118;
	st.f32 	[%rd6], %f123;
	st.f32 	[%rd6+4], %f124;
	st.f32 	[%rd6+8], %f126;

BB0_4:
	ret;
}

	// .globl	__anyhit__phong
.visible .entry __anyhit__phong(

)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<43>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<12>;


	// inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd2, [%rd1];
	mul.wide.s32 	%rd3, %r1, 12;
	add.s64 	%rd4, %rd2, %rd3;
	ld.u32 	%r2, [%rd4];
	ld.u64 	%rd5, [%rd1+8];
	mul.wide.u32 	%rd6, %r2, 16;
	add.s64 	%rd7, %rd5, %rd6;
	ld.v4.f32 	{%f4, %f5, %f6, %f7}, [%rd7];
	ld.u32 	%r3, [%rd4+4];
	mul.wide.u32 	%rd8, %r3, 16;
	add.s64 	%rd9, %rd5, %rd8;
	ld.v4.f32 	{%f11, %f12, %f13, %f14}, [%rd9];
	ld.u32 	%r4, [%rd4+8];
	mul.wide.u32 	%rd10, %r4, 16;
	add.s64 	%rd11, %rd5, %rd10;
	ld.v4.f32 	{%f18, %f19, %f20, %f21}, [%rd11];
	// inline asm
	call (%f1), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f2), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f3), _optix_get_world_ray_direction_z, ();
	// inline asm
	sub.ftz.f32 	%f25, %f11, %f4;
	sub.ftz.f32 	%f26, %f12, %f5;
	sub.ftz.f32 	%f27, %f13, %f6;
	sub.ftz.f32 	%f28, %f18, %f4;
	sub.ftz.f32 	%f29, %f19, %f5;
	sub.ftz.f32 	%f30, %f20, %f6;
	mul.ftz.f32 	%f31, %f26, %f30;
	mul.ftz.f32 	%f32, %f27, %f29;
	sub.ftz.f32 	%f33, %f31, %f32;
	mul.ftz.f32 	%f34, %f27, %f28;
	mul.ftz.f32 	%f35, %f25, %f30;
	sub.ftz.f32 	%f36, %f34, %f35;
	mul.ftz.f32 	%f37, %f25, %f29;
	mul.ftz.f32 	%f38, %f26, %f28;
	sub.ftz.f32 	%f39, %f37, %f38;
	mul.ftz.f32 	%f40, %f36, %f2;
	fma.rn.ftz.f32 	%f41, %f33, %f1, %f40;
	fma.rn.ftz.f32 	%f42, %f39, %f3, %f41;
	setp.leu.ftz.f32	%p1, %f42, 0f00000000;
	@%p1 bra 	BB1_2;

	// inline asm
	call _optix_ignore_intersection, ();
	// inline asm

BB1_2:
	ret;
}

	// .globl	__miss__phong
.visible .entry __miss__phong(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__closesthit__shadow
.visible .entry __closesthit__shadow(

)
{



	ret;
}

	// .globl	__anyhit__shadow
.visible .entry __anyhit__shadow(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u32 	%r3, 0;
	st.u32 	[%rd4], %r3;
	ret;
}

	// .globl	__miss__shadow
.visible .entry __miss__shadow(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4], %r3;
	ret;
}

	// .globl	__raygen__renderFrame
.visible .entry __raygen__renderFrame(

)
{
	.local .align 4 .b8 	__local_depot6[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<57>;
	.reg .b32 	%r<26>;
	.reg .b64 	%rd<10>;


	mov.u64 	%SPL, __local_depot6;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd2, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	// inline asm
	call (%r1), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_launch_index_y, ();
	// inline asm
	mov.u64 	%rd4, 1065353216;
	st.local.u32 	[%rd3+4], %rd4;
	st.local.u32 	[%rd3], %rd4;
	mov.u32 	%r16, 1065353216;
	st.local.u32 	[%rd3+8], %r16;
	shr.u64 	%rd5, %rd2, 32;
	cvt.u32.u64	%r14, %rd5;
	cvt.u32.u64	%r15, %rd2;
	cvt.rn.f32.s32	%f10, %r1;
	add.ftz.f32 	%f11, %f10, 0f3F000000;
	cvt.rn.f32.s32	%f12, %r2;
	add.ftz.f32 	%f13, %f12, 0f3F000000;
	// inline asm
	call (%r4), _optix_get_launch_dimension_x, ();
	// inline asm
	// inline asm
	call (%r5), _optix_get_launch_dimension_y, ();
	// inline asm
	cvt.rn.f32.u32	%f14, %r4;
	cvt.rn.f32.u32	%f15, %r5;
	div.approx.ftz.f32 	%f16, %f11, %f14;
	div.approx.ftz.f32 	%f17, %f13, %f15;
	fma.rn.ftz.f32 	%f18, %f16, 0f40000000, 0fBF800000;
	fma.rn.ftz.f32 	%f19, %f17, 0f40000000, 0fBF800000;
	ld.const.v2.f32 	{%f20, %f21}, [optixLaunchParams+48];
	mov.u32 	%r13, 0;
	ld.const.v2.f32 	{%f24, %f25}, [optixLaunchParams+56];
	ld.const.v2.f32 	{%f28, %f29}, [optixLaunchParams+32];
	fma.rn.ftz.f32 	%f31, %f20, %f18, %f29;
	ld.const.v2.f32 	{%f32, %f33}, [optixLaunchParams+40];
	fma.rn.ftz.f32 	%f36, %f18, %f21, %f32;
	fma.rn.ftz.f32 	%f37, %f18, %f24, %f33;
	ld.const.v2.f32 	{%f38, %f39}, [optixLaunchParams+64];
	fma.rn.ftz.f32 	%f42, %f19, %f25, %f31;
	fma.rn.ftz.f32 	%f43, %f19, %f38, %f36;
	fma.rn.ftz.f32 	%f44, %f19, %f39, %f37;
	mul.ftz.f32 	%f45, %f43, %f43;
	fma.rn.ftz.f32 	%f46, %f42, %f42, %f45;
	fma.rn.ftz.f32 	%f47, %f44, %f44, %f46;
	rsqrt.approx.ftz.f32 	%f48, %f47;
	mul.ftz.f32 	%f4, %f42, %f48;
	mul.ftz.f32 	%f5, %f43, %f48;
	mul.ftz.f32 	%f6, %f44, %f48;
	ld.const.u64 	%rd1, [optixLaunchParams+72];
	ld.const.v2.f32 	{%f49, %f50}, [optixLaunchParams+24];
	mov.u32 	%r9, 255;
	mov.u32 	%r12, 2;
	mov.f32 	%f8, 0f60AD78EC;
	mov.f32 	%f9, 0f00000000;
	// inline asm
	call (%r7, %r8), _optix_trace_2, (%rd1, %f49, %f50, %f28, %f4, %f5, %f6, %f9, %f8, %f9, %r9, %r13, %r13, %r12, %r13, %r14, %r15);
	// inline asm
	ld.local.f32 	%f51, [%rd3];
	mul.ftz.f32 	%f52, %f51, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r17, %f52;
	ld.local.f32 	%f53, [%rd3+4];
	mul.ftz.f32 	%f54, %f53, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r18, %f54;
	ld.local.f32 	%f55, [%rd3+8];
	mul.ftz.f32 	%f56, %f55, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r19, %f56;
	shl.b32 	%r20, %r18, 8;
	shl.b32 	%r21, %r19, 16;
	or.b32  	%r22, %r17, %r20;
	or.b32  	%r23, %r22, %r21;
	or.b32  	%r24, %r23, -16777216;
	mad.lo.s32 	%r25, %r4, %r2, %r1;
	ld.const.u64 	%rd6, [optixLaunchParams+8];
	cvta.to.global.u64 	%rd7, %rd6;
	mul.wide.u32 	%rd8, %r25, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.u32 	[%rd9], %r24;
	ret;
}


